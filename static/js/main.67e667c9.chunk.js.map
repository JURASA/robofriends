{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","errorBoundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"+MAkBeA,EAdF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,GACxB,OAGI,yBAAKC,UAAY,uDACb,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,cACrB,6BACI,4BAAKF,GACL,2BAAIC,MCoBLK,EA7BE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAChB,OACI,6BAQGA,EAAOC,KAAI,SAACC,EAAKC,GAIR,OACI,kBAAC,EAAD,CACIC,IAAKD,EACLR,GAAKK,EAAOG,GAAGR,GACfF,KAAMO,EAAOG,GAAGV,KAChBC,MAAQM,EAAOG,GAAGT,WAjBtC,MCYOW,EAfG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAC7B,OACI,yBAAKX,UAAU,OACX,2BACIA,UAAY,mCACZY,KAAM,SACNC,YAAY,gBAEZC,SAAYH,MCIbI,EAVA,SAACC,GACZ,OAGI,yBAAKC,MAAS,CAACC,SAAU,SAAUC,OAAQ,kBAAmBC,OAAQ,UACjEJ,EAAMK,SADX,MCeOC,E,kDApBX,WAAYN,GAAO,IAAD,8BACd,cAAMA,IACDO,MAAQ,CACTC,UAAW,GAHD,E,8DAOAC,EAAOC,GACrBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAIzB,OAAIG,KAAKJ,MAAMC,SACJ,wDAEJG,KAAKX,MAAMK,a,GAhBEQ,aC4EbC,E,kDAlEX,aAAe,IAAD,8BAGV,gBAoBJC,eAAiB,SAACC,GAEd,EAAKJ,SAAS,CAAElB,YAAasB,EAAMC,OAAOC,SArB1C,EAAKX,MAAQ,CAETnB,OAAQ,GACRM,YAAa,IAPP,E,gEAWM,IAAD,OAEfyB,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAK,OAAI,EAAKX,SAAS,CAAExB,OAAQmC,S,+BAcrC,IAAD,OAGCC,EAAiBb,KAAKJ,MAAMnB,OAAOqC,QAAO,SAAAC,GAC5C,OAAOA,EAAM7C,KAAK8C,cAAcC,SAAS,EAAKrB,MAAMb,YAAYiC,kBAGpE,OAAiC,IAA7BhB,KAAKJ,MAAMnB,OAAOyC,OACX,0CAMH,yBAAK7C,UAAU,MACX,wBAAIA,UAAY,MAAhB,eAGA,kBAAC,EAAD,CAAWW,aAAcgB,KAAKI,iBAC9B,kBAAC,EAAD,KAMI,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAU3B,OAAUoC,W,GA1D5BX,aCGEiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAApC,GACLqC,QAAQrC,MAAMA,EAAMsC,a","file":"static/js/main.67e667c9.chunk.js","sourcesContent":["import React from 'react';\r\n// You'll notice that within the parameters we are using what we call \r\n// destructuring in javascript. Essentially, we are just receiving props,\r\n// then were are destructuring the props right inside of those curly brakcets\r\nconst Card = ({name, email, id}) => {\r\n    return(\r\n        // You can only return on element, which is the div element\r\n        // You cannot return a title, say an h1 tag outside of the div\r\n        <div className = \"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n            <img alt='robots' src={`https://robohash.org/${id}?200x200`} />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n    return (\r\n        <div>\r\n           {\r\n            // We are running a map function on robots array in order to return a new array.\r\n            // Essentially, we take the values from the \"robots\" array and pass it through\r\n            // \"Card\" where we return a single card with the given properties associated\r\n            // to the specific index. Since this is a loop and function, it \r\n            // will return essentially a list of cards becuase it is iterating though \r\n            // the \"robots\" array\r\n           robots.map((user,i) => {\r\n                    // remember to always add a key to each element because if you don't,\r\n                    // then when javascript deletes one card, it won't know which one you\r\n                    // deleted, thus, having a key ensures each object is it's own \"atom\"\r\n                    return (\r\n                        <Card \r\n                            key={i} \r\n                            id ={robots[i].id} \r\n                            name={robots[i].name} \r\n                            email= {robots[i].email}\r\n                        />\r\n                    );\r\n                })\r\n           };\r\n        </div>     \r\n    );\r\n\r\n}\r\n\r\nexport default CardList;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\n\r\nconst SearchBox = ({searchfield, searchChange}) => {\r\n    return (\r\n        <div className='pa2'> \r\n            <input \r\n                className = 'pa3 ba b--green bg-lightest-blue'\r\n                type ='search' \r\n                placeholder='search robots' \r\n                // We're just listening to anytime the event changes\r\n                onChange = {searchChange}\r\n            />\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default SearchBox;\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\n// We learned about props, states, but not chldren. Since \"Scroll\" is a \r\n// wrapper we need to pass through it children\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        // Within style, the first layer is javascript and the second layer\r\n        // is CSS\r\n        <div style = {{overflow: 'scroll', border: '5px solid black', height: '900px'}}>\r\n            {props.children};\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            hasError : false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState({hasError: true});\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h1>Oooops. That is not good</h1>\r\n        }\r\n        return this.props.children;\r\n    }\r\n\r\n}\r\n\r\nexport default ErrorBoundary;\r\n\r\n","import React, {Component} from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\n// import { robots } from './robots';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../errorBoundary';\r\n\r\n// We don't need to write React.Component because of destructuring. \r\n// Javascript knows Component is from React because we wrote {Component}\r\nclass App extends Component {\r\n    // In order to create a state within react, we have to create a constructor,\r\n    // and within it, we can declare a state\r\n    constructor() {\r\n        // This calls the constructor from component so that we can use the\r\n        // \"this\" keyword.\r\n        super()\r\n        this.state = {\r\n            // These are the things that can change and affect our app\r\n            robots: [],\r\n            searchfield: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        // fyi fetch is a window method\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n            .then(response=> response.json())\r\n            .then(users => this.setState({ robots: users}));\r\n    }\r\n\r\n    // We use arrow functions whenever we make our own methods on a component\r\n    // because this ensures that the \"this\" values are according to where it\r\n    // was created, which is the app. Otherwise, the event which happened\r\n    // would be refering to what happened inside of the jsx tags within\r\n    // SearchBox.js instead of within the App, App.js itself\r\n    onSearchChange = (event) => {\r\n        // Never do this.state.searchfield =. Use this instead:\r\n        this.setState({ searchfield: event.target.value});\r\n    }\r\n    \r\n\r\n    render() {\r\n        // \"event\" is just the event itself but value actually gives us\r\n        // what's inside of the searchbox\r\n        const filteredRobots = this.state.robots.filter(robot =>{\r\n            return robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n        });\r\n        // If server is slow, add a loading bar\r\n        if (this.state.robots.length === 0){\r\n            return <h1>Loading...</h1>;\r\n            } else {\r\n            // What we're doing is changing the state so that the searchfield \r\n            // always gets updated and now we're filetering the robots according\r\n            // to the changed search field\r\n            return(\r\n                <div className='tc'>\r\n                    <h1 className = 'f1'>RoboFriends</h1>\r\n                    {/* We have to say \"this\" for onSearchChange because we\r\n                    are trying to see if the search changes for the \"App\" */}\r\n                    <SearchBox searchChange={this.onSearchChange}/>\r\n                    <Scroll>\r\n                        {/* originally we used \"this.state.robots\" because we wanted\r\n                        the CardList component to receive all the robots. Now that\r\n                        we have a way to filter robots in app.js, we want to pass\r\n                        down to the child node, CardList only what the use has \r\n                        typed down. */}\r\n                        <ErrorBoundary>\r\n                          <CardList robots = {filteredRobots}/>  \r\n                        </ErrorBoundary> \r\n                    </Scroll>\r\n                </div>\r\n                \r\n            );\r\n        }\r\n        \r\n    } \r\n}\r\n\r\nexport default App;\r\n\r\n// PROPS are always inputs we get and we never change them\r\n// STATE simply means the description of your app. A state is simply \r\n// an object that describes your application. The state is our robot \r\n// and whatever is entered into the searchbox, and we can change these values\r\n// \r\n// PROPS are essentially things that come out of states.\r\n// A parent feeds state into a child component, and as soon as a child \r\n// component receives a state, it's a property. That child can never \r\n// change that property. The parents just tells it what the state is and\r\n// the child receives it as {robots}\r\n//\r\n// Thus, ALL react components are what are known as \"pure functions\" because\r\n// Smart components usually have class syntax and are reactive\r\n\r\n\r\n\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}